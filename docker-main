FROM ubuntu:focal
MAINTAINER Yu-Jye Tung

ARG DEBIAN_FRONTEND=noninteractive

### Privilege for some installations
USER root

### Install common necessary packages
RUN apt-get clean
RUN apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get -y install python3 python3-pip git 
RUN apt-get install -y build-essential && \
    apt-get update && \
    apt-get install -y vim \
                       libgmp-dev \
                       tar \
                       perl \
                       pkg-config \
                       autoconf \
                       automake \
                       graphviz \
                       libgnomecanvas2-dev \
                       libgtksourceview2.0-dev \
                       libgtk-3-dev \
                       m4 \
	               make \
                       cmake \
                       flex \
                       libboost-all-dev \
                       libboost-dev \
                       libboost-test-dev \
                       libboost-system-dev \
                       libc6 \
                       libc6-dev \
                       libstdc++6 \
                       llvm \
                       llvm-dev \
                       gcc-multilib \
	               gcc \
                       libffi-dev \
                       libz-dev \
                       software-properties-common \
                       clang \
                       jq \
                       wget \
                       time \
                       zlib1g-dev \
                       opam

### Install Rosette (Racket)
RUN mkdir /rosette-install
WORKDIR /rosette-install
# racket install script is too big to store in git
RUN wget https://download.racket-lang.org/installers/8.2/racket-8.2-x86_64-linux-cs.sh
RUN chmod 755 racket-8.2-x86_64-linux-cs.sh
RUN echo "yes\n1\n" | sh racket-8.2-x86_64-linux-cs.sh
RUN raco setup
RUN raco pkg install custom-load
RUN raco pkg install rfc6455
RUN raco pkg install rosette
# Get Rosette code
COPY ./installs/rosette/expr-gen.rkt /synthesis/
COPY ./installs/rosette/get_synthesis.sh /synthesis/

###  Install Frama-C
RUN opam init --disable-sandboxing --shell-setup
RUN eval $(opam env) && \ 
    opam install -y depext && \
    opam depext --install -y lablgtk3 lablgtk3-sourceview3
RUN eval $(opam env) && \ 
    opam depext --install -y frama-c
# the ENVs are replacement for "eval $(opam env)"
# eval $(opam env) doesn't work here since each RUN command runs a new shell in a new container: 
# https://stackoverflow.com/questions/56253582/how-do-i-run-the-eval-envkey-source-command-in-docker-using-dockerfile
ENV OPAM_SWITCH_PREFIX='/root/.opam/default'
ENV CAML_LD_LIBRARY_PATH='/root/.opam/default/lib/stublibs:/usr/local/lib/ocaml/4.08.1/stublibs:/usr/lib/ocaml/stublibs'
ENV OCAML_TOPLEVEL_PATH='/root/.opam/default/lib/toplevel'
ENV PKG_CONFIG_PATH='/root/.opam/default/lib/pkgconfig'
ENV MANPATH=':/root/.opam/default/man'
ENV PATH='/root/.opam/default/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
COPY ./installs/frama-c/prettyvsa.ml / 
COPY ./src /src

### Install Python 3.10
RUN apt update
RUN apt install software-properties-common
RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt -y install python3.10

# since my tool assume this working directory
WORKDIR /llvm-base/build



